import{_ as t,c as e,o as d,a as r}from"./app.3e0f3fbc.js";const u=JSON.parse('{"title":"DOM和BOM","description":"","frontmatter":{},"headers":[{"level":2,"title":"JavaScript的结构","slug":"javascript的结构","link":"#javascript的结构","children":[]},{"level":2,"title":"DOM","slug":"dom","link":"#dom","children":[{"level":3,"title":"DOM树","slug":"dom树","link":"#dom树","children":[]},{"level":3,"title":"DOM操作元素方法","slug":"dom操作元素方法","link":"#dom操作元素方法","children":[]}]},{"level":2,"title":"BOM","slug":"bom","link":"#bom","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"window对象常见事件","slug":"window对象常见事件","link":"#window对象常见事件","children":[]},{"level":3,"title":"location对象","slug":"location对象","link":"#location对象","children":[]},{"level":3,"title":"history对象","slug":"history对象","link":"#history对象","children":[]},{"level":3,"title":"navigator对象","slug":"navigator对象","link":"#navigator对象","children":[]}]}],"relativePath":"面试/NONI/JS/JS基础/DOM和BOM.md"}'),a={name:"面试/NONI/JS/JS基础/DOM和BOM.md"},i=r('<h1 id="dom和bom" tabindex="-1">DOM和BOM <a class="header-anchor" href="#dom和bom" aria-hidden="true">#</a></h1><h2 id="javascript的结构" tabindex="-1">JavaScript的结构 <a class="header-anchor" href="#javascript的结构" aria-hidden="true">#</a></h2><h4 id="javascript-ecmascript-bom-dom" tabindex="-1"><strong>JavaScript = ECMAscript + BOM + DOM</strong> <a class="header-anchor" href="#javascript-ecmascript-bom-dom" aria-hidden="true">#</a></h4><p>ECMAscript：JS的标准，规定了各个浏览器如何执行JS的语法。</p><p>DOM：用于操作XML、HTML文档的应用编程接口。给JS提供了访问和操作HTML元素的方法</p><p>BOM：浏览器对象模型，是控制浏览器行为的接口。</p><h2 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-hidden="true">#</a></h2><h3 id="dom树" tabindex="-1">DOM树 <a class="header-anchor" href="#dom树" aria-hidden="true">#</a></h3><p>HTML元素所构成的树</p><h3 id="dom操作元素方法" tabindex="-1">DOM操作元素方法 <a class="header-anchor" href="#dom操作元素方法" aria-hidden="true">#</a></h3><h4 id="获取节点的dom方法" tabindex="-1">获取节点的DOM方法： <a class="header-anchor" href="#获取节点的dom方法" aria-hidden="true">#</a></h4><ol><li>getElementById(id)：通过元素的id属性获取单个元素节点，返回<strong>对象</strong></li><li>getElementsByTagName(tagName)：通过元素的标签名获取一组元素节点，返回<strong>数组</strong></li><li>getElementsByClassName(className)：通过元素的类名获取一组元素节点，返回<strong>数组</strong></li><li>getElementsByName(name_content)：通过元素的name属性值来获取元素，返回<strong>数组</strong></li><li>querySelector(selector)：通过选择器获取匹配的第一个元素节点，<strong>对象</strong></li><li>querySelectorAll(selector)：通过选择器获取匹配的所有元素节点，<strong>数组</strong></li></ol><h4 id="获取-设置元素的属性值的dom方法" tabindex="-1">获取/设置元素的属性值的DOM方法： <a class="header-anchor" href="#获取-设置元素的属性值的dom方法" aria-hidden="true">#</a></h4><ol><li>getAttribute(name)：获取元素的指定属性值。</li><li>setAttribute(name, value)：设置元素的指定属性值。</li><li>removeAttribute(name)：移除元素的指定属性。</li></ol><h4 id="创建节点-node-的dom方法" tabindex="-1">创建节点(Node)的DOM方法： <a class="header-anchor" href="#创建节点-node-的dom方法" aria-hidden="true">#</a></h4><ol><li>createElement(tagName)：创建指定标签名的元素节点。</li><li>createTextNode(text)：创建包含指定文本内容的文本节点。</li><li>createDocumentFragment()：创建一个空的文档片段节点，可以用来存储和操作一组节点。</li></ol><h4 id="增添节点的dom方法" tabindex="-1">增添节点的DOM方法： <a class="header-anchor" href="#增添节点的dom方法" aria-hidden="true">#</a></h4><ol><li>appendChild(node)：将一个节点添加到父节点的子节点列表末尾。</li><li>insertBefore(newNode, referenceNode)：在父节点的子节点列表中，在指定参考节点之前插入新节点。</li></ol><h4 id="删除节点的dom方法" tabindex="-1">删除节点的DOM方法： <a class="header-anchor" href="#删除节点的dom方法" aria-hidden="true">#</a></h4><ol><li>removeChild(node)：从父节点的子节点列表中移除指定节点。</li><li>parentNode.removeChild(node)：通过父节点移除指定节点。</li></ol><h4 id="dom常见的一些属性" tabindex="-1">DOM常见的一些属性： <a class="header-anchor" href="#dom常见的一些属性" aria-hidden="true">#</a></h4><ol><li>innerHTML：元素的HTML内容。</li><li>textContent：元素及其后代节点的文本内容。</li><li>className：元素的类名。</li><li>id：元素的唯一标识符。</li><li>style：元素的行内样式。</li><li>parentNode：元素的父节点。</li><li>childNodes：元素的子节点列表。</li><li>previousSibling：元素的前一个同级节点。</li><li>nextSibling：元素的后一个同级节点。</li></ol><h2 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-hidden="true">#</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-hidden="true">#</a></h3><p>浏览器对象模型，核心对象window，包含DOM。把浏览器作为对象来看待，顶级对象就是window，由一系列相关对象构成，并为每个对象提供方法和属性。</p><p>document,location,navigation,screen,history</p><h3 id="window对象常见事件" tabindex="-1">window对象常见事件 <a class="header-anchor" href="#window对象常见事件" aria-hidden="true">#</a></h3><table><thead><tr><th>属性/方法</th><th>含义</th></tr></thead><tbody><tr><td>opener</td><td>当前窗口的父窗口</td></tr><tr><td>length</td><td>窗口中的框架数</td></tr><tr><td>document</td><td>窗口中当前显示的文档对象</td></tr><tr><td>alert(string)</td><td>创建一个警告对话框，显示一条信息</td></tr><tr><td>close()</td><td>关闭窗口</td></tr><tr><td>confirm()</td><td>创建一个需要用户确认的对话框</td></tr><tr><td>open(url,name,[options])</td><td>打开一个新窗口并返回新 window 对象</td></tr><tr><td>prompt(text,defaultInput)</td><td>创建一个对话框要求用户输入信息</td></tr><tr><td>setInterval(expression,milliseconds)</td><td>经过指定时间间隔计算一个表达式</td></tr><tr><td>setInterval(function,millis enconds,[arguments])</td><td>经过指定时间间隔后调用一个函数</td></tr><tr><td>setTimeout(expression,milli seconds)</td><td>在定时器超过后计算一个表达式</td></tr><tr><td>setTimeout(expression,milli seconds,[arguments])</td><td>在定时器超过时后计算一个函数</td></tr></tbody></table><h3 id="location对象" tabindex="-1">location对象 <a class="header-anchor" href="#location对象" aria-hidden="true">#</a></h3><p><strong>location用于获取或设置URL，能够解析URL，返回对象</strong></p><p><strong>window.location = location = document.location</strong></p><table><thead><tr><th>属性/方法</th><th>内容</th></tr></thead><tbody><tr><td>host</td><td>主机名：端口号</td></tr><tr><td>hostname</td><td>主机名</td></tr><tr><td>href</td><td>整个 URL</td></tr><tr><td>pathname</td><td>路径名</td></tr><tr><td>port</td><td>端口号</td></tr><tr><td>protocol</td><td>协议部分</td></tr><tr><td>search</td><td>查询字符串</td></tr><tr><td>reload()</td><td>重载当前 URL</td></tr><tr><td>repalce()</td><td>用新的 URL 替换当前页面</td></tr></tbody></table><h3 id="history对象" tabindex="-1">history对象 <a class="header-anchor" href="#history对象" aria-hidden="true">#</a></h3><p><strong>与浏览器历史记录交互，包含用户访问过的URL</strong>（窗口打开开始记）</p><table><thead><tr><th>属性/方法</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>history 对象中的记录数</td></tr><tr><td>back()</td><td>前往浏览器历史条目前一个 URL，类似后退</td></tr><tr><td>forward()</td><td>前往浏览器历史条目下一个 URL，类似前进</td></tr><tr><td>go(num)</td><td>浏览器在 history 对象中向前或向后</td></tr></tbody></table><h3 id="navigator对象" tabindex="-1">navigator对象 <a class="header-anchor" href="#navigator对象" aria-hidden="true">#</a></h3><p><strong>BOM中识别客户端浏览器的一个window属性。</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>appName</td><td>完整的浏览器名称和版本信息</td></tr><tr><td>platform</td><td>浏览器所在的系统平台</td></tr><tr><td>plugins</td><td>浏览器中安装的插件信息的数 组</td></tr><tr><td>userAgent</td><td>浏览器的用户代理字符串</td></tr><tr><td>userLanguage</td><td>操作系统的默认语言</td></tr></tbody></table>',38),o=[i];function l(n,h,s,c,m,p){return d(),e("div",null,o)}const b=t(a,[["render",l]]);export{u as __pageData,b as default};

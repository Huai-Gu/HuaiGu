import{_ as s,c as a,o as n,a as l}from"./app.ec03d301.js";const u=JSON.parse('{"title":"v-if和v-for同时使用问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":2,"title":"不推荐使用原因","slug":"不推荐使用原因","link":"#不推荐使用原因","children":[]},{"level":2,"title":"替代方法","slug":"替代方法","link":"#替代方法","children":[{"level":3,"title":"方法一","slug":"方法一","link":"#方法一","children":[]},{"level":3,"title":"方法二","slug":"方法二","link":"#方法二","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"面试/NONI/Vue/v-if和v-for同时使用问题.md"}'),o={name:"面试/NONI/Vue/v-if和v-for同时使用问题.md"},e=l(`<h1 id="v-if和v-for同时使用问题" tabindex="-1">v-if和v-for同时使用问题 <a class="header-anchor" href="#v-if和v-for同时使用问题" aria-hidden="true">#</a></h1><p>在vue2的官方文档中提到了不推荐v-if和v-for同时使用，给出的解释是在两者中，v-for具有比v-if更高的优先级（vue2）。</p><h2 id="实例" tabindex="-1">实例 <a class="header-anchor" href="#实例" aria-hidden="true">#</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user in users</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user.isActive</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user.id</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;"> &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{ user.name }}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>当 Vue 处理指令时，<code>v-for</code> 比 <code>v-if</code> 具有更高的优先级，因此上面的代码将会经过如下运算：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">users</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">user</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isActive</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="不推荐使用原因" tabindex="-1">不推荐使用原因 <a class="header-anchor" href="#不推荐使用原因" aria-hidden="true">#</a></h2><p>如果<code>v-for</code> 和 <code>v-if</code>同时使用， 会导致页面可能只要渲染一小部分用户的元素，但也会在每次重新渲染的时候遍历整个列表的情况。如果有1000个元素，但只有1个元素符合<code>v-if</code>的条件，最终只会渲染这个符合条件的元素，那么就浪费了999个<code>v-if</code>的计算。</p><h2 id="替代方法" tabindex="-1">替代方法 <a class="header-anchor" href="#替代方法" aria-hidden="true">#</a></h2><h3 id="方法一" tabindex="-1">方法一 <a class="header-anchor" href="#方法一" aria-hidden="true">#</a></h3><p>以上一个例子为例，将其更换为在一个计算属性上遍历：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user in activeUsers</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user.id</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;"> &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{ user.name }}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">activeUsers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">users</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">user</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isActive</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-hidden="true">#</a></h4><p>该方法在计算属性中将列表过滤，在<code>v-for</code>中直接使用过滤后的列表，更倾向于使用在当需要对数据进行复杂的处理或计算的情况，使用计算属性可以方便地将处理逻辑封装起来，使模板更加清晰简洁，并且计算属性在处理数据的同时能够提高页面性能。</p><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h4><ul><li>过滤后的列表只会在 <code>users</code> 数组发生相关变化时才被重新运算，过滤更高效。</li><li>使用 <code>v-for=&quot;user in activeUsers&quot;</code> 之后，我们在渲染的时候只遍历符合条件的元素，渲染更高效。</li><li>将渲染页面的逻辑和业务逻辑分离开来，使它们彼此独立，可维护性 (对逻辑的更改和扩展) 更强。</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-hidden="true">#</a></h4><ul><li>对于较大的数组，计算属性可能会影响性能。因为每当计算属性被访问时，都会重新遍历整个<code>users</code>数组。</li></ul><h3 id="方法二" tabindex="-1">方法二 <a class="header-anchor" href="#方法二" aria-hidden="true">#</a></h3><p>通过将 <code>v-if</code> 移动到容器元素ul上，不会对列表中的每个元素检查是否符合<code>v-if</code>的条件，只需要检查容器元素是否符合展示条件，且不会在条件为否的时候运算 <code>v-for</code>。如果没有容器元素，则可以在外层嵌套<code>template</code>，在这层进行<code>v-if</code>的判断。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shouldShowUsers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">li</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user in users</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user.id</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  {{ user.name }}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">li</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h4 id="适用场景-1" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-1" aria-hidden="true">#</a></h4><p>该方法避免了渲染本应该被隐藏的列表。如果需要根据某个条件动态渲染一组元素时，可以使用<code>v-if</code>指令。</p><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-hidden="true">#</a></h4><ul><li>使用<code>v-if</code>指令可以更加灵活地控制元素的显示和隐藏，可以根据需要动态地添加或删除DOM元素。</li><li>在容器元素上使用<code>v-if</code>可以提高页面性能，因为只有在<code>shouldShowUsers</code>为<code>true</code>时才会渲染列表，而不是在每个列表项上都进行判断。</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a></h4><ul><li>在模板中嵌套过多的指令可能会使代码变得难以理解和维护。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>在vue2中，不要把<code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上，会带来性能上的浪费，即每次渲染都会先循环再进行条件的判断。</li><li>替代方法一，可通过计算属性<code>computed</code>提前过滤掉那些不需要显示的项来实现最终效果。</li><li>替代方法二，可通过在外层添加<code>v-if</code>判断，内部进行<code>v-for</code>循环的方法来实现最终效果。</li></ul>`,30),p=[e];function c(t,r,i,F,D,y){return n(),a("div",null,p)}const h=s(o,[["render",c]]);export{u as __pageData,h as default};

import{_ as s,c as a,o as l,a as n}from"./app.709f5fd1.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"代码冲突","slug":"代码冲突","link":"#代码冲突","children":[]},{"level":2,"title":"git分支管理","slug":"git分支管理","link":"#git分支管理","children":[]},{"level":2,"title":"git 提交规范","slug":"git-提交规范","link":"#git-提交规范","children":[]}],"relativePath":"计算机基础/git/git规范.md"}'),e={name:"计算机基础/git/git规范.md"},p=n(`<h2 id="代码冲突" tabindex="-1">代码冲突 <a class="header-anchor" href="#代码冲突" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxxx_branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">或者</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">时</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">or</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxxx_branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">或者</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">时</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">解消方法也是修改冲突文件并删除冲突标识&lt;&lt;&lt;&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">====</span><span style="color:#A6ACCD;"> &gt;&gt;&gt;</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">–continue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//继续更新到最新的base上</span></span>
<span class="line"></span></code></pre></div><h2 id="git分支管理" tabindex="-1">git分支管理 <a class="header-anchor" href="#git分支管理" aria-hidden="true">#</a></h2><ol><li><p>master 分支 命名：master 说明：主分支，永远处于稳定状态，对应当前线上版本 开发新需求需从master打新分支，开发完成合并回master发测试包，测试完成需打新的tag包，tag包申请上线发布 不允许在该分支直接提交代码；</p></li><li><p>develop 分支 命名：dev-{迭代版本号} 说明：主要提交代码分支 developer为分支开发目录，用于新需求开发 所有新需求需先从master主干新建一个developer分支，在分支上开发 开发完成后merge回master主干</p></li><li><p>feature 分支 命名：feature-{版本号} 说明：更能分支代码提交 feature分支用于临时出现的需求及功能变更开发，从develop分支新建一个feature分支，在分支上开发 开发完成后合并回 develop 分支</p></li><li><p>release 分支 命名：release-{版本号} 说明：发布分支，新功能合并到 develop 分支，准备发布新版本时使用的分支 当 develop 分支完成功能合并和部分 bugfix ，准备发布新版本时，切出一个 release 分支，来做发布前的准备 发布之前发现的bug 就直接在这个分支上修复，确定准备发版本就合并到 master 分支，完成发布，同时合并到 develop 分支</p></li><li><p>hotfix 分支 命名：hotfix-{date} 说明：紧急修复线上bug分支 当线上版本出现 bug 时，从master 分支切出一个 hotfix分支完成bug修复，然后将 hotfix合并到master和develop分支（如果此时存在release分支，则应该合并到release分支）</p></li><li><p>tag 采用三段式，v版本.里程碑.序号，如v1.2.1 架构升级或架构重大调整，修改第2位 新功能上线或者模块大的调整，修改第2位 bug修复上线，修改第3位</p></li></ol><h2 id="git-提交规范" tabindex="-1">git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-hidden="true">#</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>禁止使用 --force or -ff 提交</p></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">feat:</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">新增feature</span></span>
<span class="line"><span style="color:#FFCB6B;">fix:</span><span style="color:#A6ACCD;">           </span><span style="color:#C3E88D;">修复bug</span></span>
<span class="line"><span style="color:#FFCB6B;">docs:</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">仅仅修改了文档，比如README,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CHANGELOG,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CONTRIBUTE等等</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">style:</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">仅仅修改了空格、格式缩进、标点符号等等，不改变代码逻辑</span></span>
<span class="line"><span style="color:#FFCB6B;">refactor:</span><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">代码重构，没有加新功能或者修复bug</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#FFCB6B;">:</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">测试用例，包括单元测试、集成测试等</span><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#FFCB6B;">chore:</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">改变构建流程、或者增加依赖库、工具等</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">perf:</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">优化相关，比如提升性能、体验</span></span>
<span class="line"><span style="color:#FFCB6B;">revert:</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">回滚到上一个版本	</span></span>
<span class="line"></span></code></pre></div><p><br><br></p><p>-----------------------------------from后端gitlab开发文档规范------------------------------</p>`,9),o=[p];function t(r,c,C,i,y,A){return l(),a("div",null,o)}const g=s(e,[["render",t]]);export{d as __pageData,g as default};
